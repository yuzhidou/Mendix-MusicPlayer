// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package databaseconnector.actions;

import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import databaseconnector.impl.JdbcConnector;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * For a more detailed documentation, please visit the website at
 * https://docs.mendix.com/appstore/connectors/database-connector
 * 
 * This Java action provides a consistent environment for Mendix projects to
 * call an arbitrary statement on external relational databases.
 * 
 * This action requires an instance of the Statement NPE (Non-Persistable Entity)
 * with associated NPEs of its Parameters. Input parameters need to be filled in
 * before calling this action and output parameters will be filled in afterwards.
 * 
 * The JDBC drivers for the databases you want to connect to must be placed
 * inside the userlib directory of your project.
 * 
 * Note: Proper security is required when manually composing the statement text to
 *       avoid SQL injection.
 * 
 * @param jdbcUrl A database JDBC URL address that points to your database.
 * 
 * @param userName The user name for logging into the database.
 * 
 * @param password The password for logging into the database.
 * 
 * @param statement An instance of the Statement NPE containing both the content of the
 *                  statement to be called as well as all of its parameters.
 */
public class ExecuteCallableStatement extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String jdbcUrl;
	private java.lang.String userName;
	private java.lang.String password;
	private IMendixObject __statement;
	private databaseconnector.proxies.Statement statement;

	public ExecuteCallableStatement(IContext context, java.lang.String jdbcUrl, java.lang.String userName, java.lang.String password, IMendixObject statement)
	{
		super(context);
		this.jdbcUrl = jdbcUrl;
		this.userName = userName;
		this.password = password;
		this.__statement = statement;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.statement = this.__statement == null ? null : databaseconnector.proxies.Statement.initialize(getContext(), __statement);

		// BEGIN USER CODE
		if (this.statement == null) {
			throw new IllegalArgumentException("Execute callable statement was called with an empty value.");
		}
		connector.executeCallableStatement(this.jdbcUrl, this.userName, this.password, this.statement);
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteCallableStatement";
	}

	// BEGIN EXTRA CODE
	private final ILogNode logNode = Core.getLogger(this.getClass().getName());

	private final JdbcConnector connector = new JdbcConnector(logNode);
	// END EXTRA CODE
}
